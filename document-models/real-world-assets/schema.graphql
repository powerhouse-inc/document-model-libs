type RealWorldAssetsState {
    accounts: [Account!]!
    principalLenderAccountId: ID! # Account.id (That relates to the Maker account)
    spvs: [Spv!]!
    feeTypes: [ServiceProvider!]!
    fixedIncomeTypes: [FixedIncomeType!]!
    portfolio: [Asset!]!
    transactions: [GroupTransaction!]!
}

union Asset = FixedIncome | Cash

type FixedIncome {
    id: ID!
    fixedIncomeTypeId: ID! # FixedIncomeType.id
    name: String!
    spvId: ID! # Spv.id
    maturity: DateTime!
    purchaseDate: DateTime! # Weighted average of underlying transactions
    notional: Float! # Face value sum of the underlying transactions
    purchasePrice: Float! # purchaseProceeds / notional
    purchaseProceeds: Float! # Total cash outflow spent on purchases
    totalDiscount: Float! # notional - purchaseProceeds
    annualizedYield: Float! # (Purchase Price / ( Notional - Purchase Price)) x (365 / Days to Maturity ) * 100
    ISIN: String
    CUSIP: String
    coupon: Float
}

type Cash {
    id: ID!
    spvId: ID! # Spv.id
    currency: String! # Will always be "USD" for version 1
}

type FixedIncomeType {
    id: ID!
    name: String!
}

type Spv {
    id: ID!
    name: String!
}

type BaseTransaction {
    id: ID!
    assetId: ID! # Asset.id
    amount: Float!
    entryTime: DateTime!
    tradeTime: DateTime
    settlementTime: DateTime
    txRef: String
    accountId: ID # Account.id
    counterPartyAccountId: ID # Account.id
}

type Account {
    id: ID!
    reference: String! # e.g. bank account number or ETH address
    label: String
}

type GroupTransaction {
    id: ID!
    type: GroupTransactionType!
    entryTime: DateTime!
    cashTransaction: BaseTransaction
    fixedIncomeTransaction: BaseTransaction
    feeTransactions: [BaseTransaction]
    interestTransaction: BaseTransaction
}

enum CashGroupTransactionType {
    PrincipalDraw
    PrincipalReturn
}

enum FixedIncomeGroupTransactionType {
    AssetPurchase
    AssetSale
    InterestDraw # Payment from Borrower to Arranger (If there is a coupon)
    InterestReturn # Payment from Arranger to Maker
    FeesPayment
}

union GroupTransactionType =
    | CashGroupTransactionType
    | FixedIncomeGroupTransactionType

type ServiceProvider {
    id: ID!
    name: String!
    feeType: String!
    accountId: ID! # Account.id
}

type TransactionFee {
    serviceProviderId: ID!
    amount: Float!
}

scalar DateTime

# general

input CreateSpvInput {
    id: ID!
    name: String!
}

input EditSpvInput {
    id: ID!
    name: String
}

input DeleteSpvInput {
    id: ID!
}

input CreateServiceProviderInput {
    id: ID!
    name: String!
    feeType: String!
    accountId: ID!
}

input EditServiceProviderInput {
    id: ID!
    name: String
    feeType: String
    accountId: ID
}

input DeleteServiceProviderInput {
    id: ID!
}

# portfolio

input CreateFixedIncomeTypeInput {
    id: ID!
    name: String!
}

input EditFixedIncomeTypeInput {
    id: ID!
    name: String
}

input CreateFixedIncomeAssetInput {
    id: ID!
    fixedIncomeTypeId: ID! # RwaFixedIncomeType.id
    spvId: ID! # Spv.id
    name: String!
    maturity: DateTime!
    ISIN: String
    CUSIP: String
    coupon: Float
}

input CreateCashAssetInput {
    id: ID!
    spvId: ID! # Spv.id
    currency: String! # Will always be "USD" for version 1
}

input EditCashAssetInput {
    id: ID!
    spvId: ID # Spv.id
    currency: String # Will always be "USD" for version 1
}

input EditFixedIncomeAssetInput {
    id: ID!
    fixedIncomeTypeId: ID # RwaFixedIncomeType.id
    spvId: ID # Spv.id
    name: String
    ISIN: String
    CUSIP: String
    coupon: Float
    maturity: DateTime
}

input DeleteFixedIncomeAssetInput {
    id: ID!
}

input DeleteCashAssetInput {
    id: ID!
}

input CreateAccountInput {
    id: ID!
    reference: String! # e.g. bank account number or ETH address
    label: String
}

input EditAccountInput {
    id: ID!
    reference: String # e.g. bank account number or ETH address
    label: String
}

input DeleteAccountInput {
    id: ID!
}

# transactions

input CreateBaseTransactionInput {
    id: ID!
    assetId: ID! # Asset.id
    amount: Float!
    entryTime: DateTime!
    tradeTime: DateTime
    settlementTime: DateTime
    txRef: String
    accountId: ID # Account.id
    counterPartyAccountId: ID # Account.id
}

input EditBaseTransactionInput {
    assetId: ID # Asset.id
    amount: Float
    entryTime: DateTime
    tradeTime: DateTime
    settlementTime: DateTime
    txRef: String
    accountId: ID # Account.id
    counterPartyAccountId: ID # Account.id
}

input CreateGroupTransactionInput {
    id: ID!
    type: GroupTransactionType!
    entryTime: DateTime!
    cashTransaction: CreateBaseTransactionInput
    fixedIncomeTransaction: CreateBaseTransactionInput
    feeTransactions: [CreateBaseTransactionInput]
    interestTransaction: CreateBaseTransactionInput
}

input EditGroupTransactionInput {
    id: ID!
    type: GroupTransactionType
    entryTime: DateTime
    cashTransaction: EditBaseTransactionInput
    fixedIncomeTransaction: EditBaseTransactionInput
    feeTransactions: [EditBaseTransactionInput]
    interestTransaction: EditBaseTransactionInput
}

# when the type is changed, the transactions associated are deleted
input EditGroupTransactionTypeInput {
    id: ID!
    type: GroupTransactionType!
    entryTime: DateTime!
}

# add a fee transaction to a group transaction's list of fee payments
input AddFeeTransactionsToGroupTransactionInput {
    id: ID!
    feeTransactions: [CreateBaseTransactionInput]
}

# edit a specific fee transaction in a fees payment group transaction's list of fee payments
input EditFeeTransactionInput {
    feeTransactionId: ID!
    id: ID!
    assetId: ID # Asset.id
    amount: Float
    entryTime: DateTime
    tradeTime: DateTime
    settlementTime: DateTime
    txRef: String
    accountId: ID # Account.id
    counterPartyAccountId: ID # Account.id
}

# remove a fee transaction from a fees payment group transaction's list of fee payments
input RemoveFeeTransactionFromGroupTransactionInput {
    id: ID!
    feeTransactionId: ID!
}

input DeleteGroupTransactionInput {
    id: ID!
}
