scalar Unknown

type FolderNode {
    id: String!
    name: String!
    kind: String!
    parentFolder: String
}

type SynchronizationUnit {
    syncId: ID!
    scope: String!
    branch: String!
}

type FileNode {
    id: String!
    name: String!
    kind: String!
    documentType: String!
    scopes: [String!]!
    parentFolder: String
    synchronizationUnits: [SynchronizationUnit!]!
}

union Node = FolderNode | FileNode

type DocumentDriveState {
    id: ID!
    name: String!
    nodes: [Node!]!
    icon: String
    remoteUrl: String
}

type ListenerFilter {
    documentType: [String!]!
    documentId: [ID!]
    scope: [String!]
    branch: [String!]
}

enum TransmitterType {
    Internal
    SwitchboardPush
    PullResponder
    SecureConnect
    MatrixConnect
    RESTWebhook
}

type ListenerCallInfo {
    transmitterType: TransmitterType
    name: String
    data: String
}

type Listener {
    listenerId: ID!
    label: String
    block: Boolean!
    system: Boolean!
    filter: ListenerFilter!
    callInfo: ListenerCallInfo
}

type DocumentDriveLocalState {
    sharingType: String
    listeners: [Listener!]!
    availableOffline: Boolean!
}

# Node

input AddFileInput {
    id: ID!
    name: String!
    documentType: String!
    parentFolder: ID
    scopes: [String!]!
    document: Unknown
}

input AddFolderInput {
    id: ID!
    name: String!
    parentFolder: ID
}

input DeleteNodeInput {
    id: ID!
}

input UpdateFileInput {
    id: ID!
    parentFolder: ID
    name: String
    documentType: String
}

input UpdateNodeInput {
    id: ID!
    parentFolder: ID
    name: String
}

input CopyNodeInput {
    srcId: ID!
    targetId: ID!
    targetName: String
    targetParentFolder: ID
}

input MoveNodeInput {
    srcFolder: ID!
    targetParentFolder: ID
}

# Drive

input SetDriveNameInput {
    name: String!
}

input SetSharingTypeInput {
    type: String!
}

input SetAvailableOfflineInput {
    availableOffline: Boolean!
}

input AddListenerInput {
    listener: Listener!
}

input RemoveListenerInput {
    listenerId: String!
}
