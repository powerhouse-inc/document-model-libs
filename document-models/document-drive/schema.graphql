type FolderNode {
    id: String!
    name: String!
    kind: String!
    parentFolder: String
}

type FileNode {
    id: String!
    name: String!
    kind: String!
    documentType: String!
    parentFolder: String
}

union Node = FolderNode | FileNode

type DocumentDriveState {
    id: ID!
    name: String!
    nodes: [Node!]!
    icon: String
    remoteUrl: String
}

# Node

input AddFileInput {
    id: String!
    name: String!
    documentType: String!
    document: String!
    parentFolder: String
}

input AddFolderInput {
    id: ID!
    name: String!
    parentFolder: String
}

input DeleteNodeInput {
    id: String!
}

input UpdateFileInput {
    id: ID!
    parentFolder: String
    name: String
    documentType: String
}

input UpdateNodeInput {
    id: ID!
    parentFolder: String
    name: String
    hash: String
}

input CopyNodeInput {
    srcFolder: String!
	targetParentFolder: String
}

input MoveNodeInput {
    srcFolder: String!
	targetParentFolder: String
}